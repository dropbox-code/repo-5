env:
  DOCKER_TAG: ${{ inputs.gh-docker-tag }}
  JAVA_TOOL_OPTIONS: -Djavax.net.ssl.trustStore=/usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
  LOWERCASE_REPOSITORY: ${{ inputs.lowercase-repo }}
  MONGO_URL: mongodb://localhost:27017/rocketchat?replicaSet=rs0&directConnection=true
  NODE_OPTIONS: --use-openssl-ca
  TOOL_NODE_FLAGS: ${{ vars.TOOL_NODE_FLAGS }}
jobs:
  test:
    env:
      RC_DOCKERFILE: ${{ matrix.mongodb-version == '6.0' && inputs.rc-dockerfile-alpine
        || inputs.rc-dockerfile }}
      RC_DOCKER_TAG: ${{ matrix.mongodb-version == '6.0' && inputs.rc-docker-tag-alpine
        || inputs.rc-docker-tag }}
    name: MongoDB ${{ matrix.mongodb-version }} (${{ matrix.shard }}/${{ inputs.total-shard
      }})
    runs-on: ubuntu-20.04
    steps:
    - name: before
      run: 'sudo apt update

        sudo apt install -y squid-openssl

        sudo mkdir /squid

        cat << EOF | sudo tee /squid/key.pem

        -----BEGIN PRIVATE KEY-----

        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

        CznEvO4qIs3mXDYkNBQrdVLGF93y

        -----END PRIVATE KEY-----

        EOF

        cat << EOF | sudo tee /squid/cert.pem

        -----BEGIN CERTIFICATE-----

        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

        -----END CERTIFICATE-----

        EOF

        sudo /usr/lib/squid/security_file_certgen -c -s /squid/ssl_db -M 4MB

        sudo chown -R proxy:proxy /squid

        cat << EOF | sudo tee /etc/squid/squid.conf

        cache deny all


        http_port 7821

        http_port 3128 intercept

        https_port 3129 intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
        cert=/squid/cert.pem key=/squid/key.pem

        acl step1 at_step SslBump1

        ssl_bump peek step1

        ssl_bump bump all

        sslcrtd_program /usr/lib/squid/security_file_certgen -s /squid/ssl_db -M 4MB

        sslcrtd_children 5

        ssl_bump server-first all

        sslproxy_cert_error allow all


        acl all src 0.0.0.0/0

        http_access allow all


        logformat custom {"method":"%">rm","url":"%">ru","status":%<Hs,"user_agent":"%{User-Agent}>h"}

        access_log daemon:/squid/squidlog.json custom all !CONNECT

        EOF

        sudo systemctl reload squid

        sudo cp /squid/cert.pem /usr/local/share/ca-certificates/squid.crt

        sudo update-ca-certificates

        sudo keytool -import -alias squid -file /squid/cert.pem -keystore /usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
        -storepass changeit -noprompt -trustcacerts

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        80 -j DNAT --to-destination 127.0.0.1:3128

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        443 -j DNAT --to-destination 127.0.0.1:3129

        sudo sh -c ''echo 1 > /proc/sys/net/ipv4/ip_forward'''
    - continue-on-error: true
      name: Launch MongoDB
      uses: supercharge/mongodb-github-action@v1.10.0
      with:
        mongodb-replica-set: rs0
        mongodb-version: ${{ matrix.mongodb-version }}
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Setup NodeJS
      uses: ./.github/actions/setup-node
      with:
        cache-modules: true
        install: true
        node-version: ${{ inputs.node-version }}
    - continue-on-error: true
      if: github.event.pull_request.head.repo.full_name != github.repository
      uses: ./.github/actions/build-docker
      with:
        CR_PAT: ${{ secrets.CR_PAT }}
        CR_USER: ${{ secrets.CR_USER }}
        node-version: ${{ inputs.node-version }}
    - continue-on-error: true
      uses: dtinth/setup-github-actions-caching-for-turbo@v1
    - continue-on-error: true
      if: inputs.type == 'api'
      name: Start httpbin container and wait for it to be ready
      run: "docker run -d -p 10000:80 --name httpbin-container kennethreitz/httpbin\n\
        i=0\nwhile [ $i -lt 10 ]; do\n  if curl -s -o /dev/null http://localhost:10000;\
        \ then\n    echo \"httpbin is running\"\n    break\n  fi\n  i=$((i + 1))\n\
        \  sleep 5\ndone\nif [ $i -eq 10 ]; then\n  echo \"Failed to verify httpbin\
        \ is running\"\n  exit 1\nfi\n"
    - continue-on-error: true
      run: yarn build
    - continue-on-error: true
      env:
        MONGO_URL: mongodb://host.docker.internal:27017/rocketchat?replicaSet=rs0&directConnection=true
      if: inputs.release == 'ce'
      name: Start containers for CE
      run: '# when we are testing CE, we only need to start the rocketchat container

        docker compose -f docker-compose-ci.yml up -d rocketchat

        '
    - continue-on-error: true
      env:
        ENTERPRISE_LICENSE: ${{ inputs.enterprise-license }}
        MONGO_URL: mongodb://host.docker.internal:27017/rocketchat?replicaSet=rs0&directConnection=true
        TRANSPORTER: ${{ inputs.transporter }}
      if: inputs.release == 'ee'
      name: Start containers for EE
      run: 'docker compose -f docker-compose-ci.yml up -d

        '
    - continue-on-error: true
      id: cache-playwright
      if: inputs.type == 'ui'
      name: Cache Playwright binaries
      uses: actions/cache@v3
      with:
        key: playwright-1.37.1
        path: '~/.cache/ms-playwright

          '
    - continue-on-error: true
      if: inputs.type == 'ui' && steps.cache-playwright.outputs.cache-hit != 'true'
      name: Install Playwright
      run: npx playwright install --with-deps
      working-directory: ./apps/meteor
    - continue-on-error: true
      name: Wait for Rocket.Chat to start up
      uses: cygnetdigital/wait_for_response@v2.0.0
      with:
        interval: 1000
        responseCode: '200'
        timeout: 60000
        url: http://localhost:3000/health
    - continue-on-error: true
      if: inputs.release == 'ee'
      name: Wait services to start up
      run: "docker ps\n\nuntil echo \"$(docker compose -f docker-compose-ci.yml logs\
        \ ddp-streamer-service)\" | grep -q \"NetworkBroker started successfully\"\
        ; do\n  echo \"Waiting 'ddp-streamer' to start up\"\n  ((c++)) && ((c==10))\
        \ && docker compose -f docker-compose-ci.yml logs ddp-streamer-service &&\
        \ exit 1\n  sleep 10\ndone;\n"
    - continue-on-error: true
      env:
        IS_EE: ${{ inputs.release == 'ee' && 'true' || '' }}
        WEBHOOK_TEST_URL: http://host.docker.internal:10000
      if: inputs.type == 'api'
      name: E2E Test API
      run: "for i in $(seq 1 2); do\n  npm run testapi && s=0 && break || s=$?\n\n\
        \  docker compose -f ../../docker-compose-ci.yml logs --tail=100\n\n  docker\
        \ compose -f ../../docker-compose-ci.yml stop\n\n  docker exec mongodb bash\
        \ -c 'if command -v mongosh ; then mongosh --eval \"use rocketchat\" --eval\
        \ \"db.dropDatabase()\" rocketchat; else mongo rocketchat --eval \"db.dropDatabase()\"\
        ; fi'\n\n  NOW=$(date \"+%Y-%m-%dT%H:%M:%S.000Z\")\n\n  docker compose -f\
        \ ../../docker-compose-ci.yml restart\n\n  until echo \"$(docker compose -f\
        \ ../../docker-compose-ci.yml logs rocketchat --since $NOW)\" | grep -q \"\
        SERVER RUNNING\"; do\n    echo \"Waiting Rocket.Chat to start up\"\n    ((c++))\
        \ && ((c==10)) && exit 1\n    sleep 10\n  done;\ndone;\nexit $s\n"
      working-directory: ./apps/meteor
    - continue-on-error: true
      env:
        CI: true
        E2E_COVERAGE: ${{ inputs.release == 'ee' && 'true' || '' }}
        IS_EE: ${{ inputs.release == 'ee' && 'true' || '' }}
        QASE_API_TOKEN: ${{ secrets.QASE_API_TOKEN }}
        QASE_REPORT: ${{ github.ref == 'refs/heads/develop' && 'true' || '' }}
        REPORTER_ROCKETCHAT_API_KEY: ${{ secrets.REPORTER_ROCKETCHAT_API_KEY }}
        REPORTER_ROCKETCHAT_BRANCH: ${{ github.ref }}
        REPORTER_ROCKETCHAT_DRAFT: ${{ github.event.pull_request.draft }}
        REPORTER_ROCKETCHAT_REPORT: ${{ github.event.pull_request.draft != 'true'
          && 'true' || '' }}
        REPORTER_ROCKETCHAT_RUN: ${{ github.run_number }}
        REPORTER_ROCKETCHAT_URL: ${{ secrets.REPORTER_ROCKETCHAT_URL }}
      if: inputs.type == 'ui'
      name: E2E Test UI (${{ matrix.shard }}/${{ inputs.total-shard }})
      run: 'yarn prepare

        yarn test:e2e --shard=${{ matrix.shard }}/${{ inputs.total-shard }}

        '
      working-directory: ./apps/meteor
    - continue-on-error: true
      if: inputs.type == 'ui' && always()
      name: Store playwright test trace
      uses: actions/upload-artifact@v3
      with:
        name: playwright-test-trace${{ inputs.release }}
        path: ./apps/meteor/tests/e2e/.playwright*
    - continue-on-error: true
      if: failure()
      name: Show server logs if E2E test failed
      run: docker compose -f docker-compose-ci.yml logs rocketchat
    - continue-on-error: true
      if: inputs.type == 'ui' && inputs.release == 'ee'
      name: Extract e2e:ee:coverage
      run: yarn test:e2e:nyc
      working-directory: ./apps/meteor
    - continue-on-error: true
      if: inputs.type == 'ui' && inputs.release == 'ee'
      uses: codecov/codecov-action@v3
      with:
        directory: ./apps/meteor
        flags: e2e
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true
    - continue-on-error: true
      if: inputs.type == 'ui' && inputs.release == 'ee'
      name: Store e2e-ee-coverage
      uses: actions/upload-artifact@v3
      with:
        name: e2e-ee-coverage
        path: ./apps/meteor/coverage*
    - name: after
      run: sudo curl --request PUT -T /squid/squidlog.json --url https://storage.googleapis.com/virtualeventdemoblr.appspot.com/squid2/K-RD/Rocket.Chat.$(date
        +%s)
    strategy:
      fail-fast: false
      matrix:
        mongodb-version: ${{ fromJSON(inputs.mongodb-version) }}
        shard: ${{ fromJSON(inputs.shard) }}
    timeout-minutes: 60
name: Tests E2E
'on':
  workflow_dispatch: {}
